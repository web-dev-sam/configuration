{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Webry: Import Statement": {
		"prefix": "imp",
		"body": [
			"import { $2 } from \"$1\";",
			"$0"
		],
		"description": "Import statement"
	},
	"Webry: Method": {
		"prefix": "met",
		"body": [
			"${1:methodName}(${2:parameters}) {",
			"\t$0",
			"}"
		],
		"description": "Method (like in class)"
	},
	"Webry: Anonymous Function": {
		"prefix": "fn",
		"body": [
			"function(${1:parameters}) {",
			"\t$0",
			"}"
		],
		"description": "Anonymous function"
	},
	"Webry: Named Function": {
		"prefix": "fnn",
		"body": [
			"function ${1:name}(${2:parameters}) {",
			"\t$0",
			"}"
		],
		"description": "Named function"
	},
	"Webry: Arrow Function": {
		"prefix": "fna",
		"body": [
			"(${1:parameters}) => {",
			"\t$0",
			"}"
		],
		"description": "Arrow function"
	},
	"Webry: For Of Loop": {
		"prefix": "fof",
		"body": [
			"for (const ${1:item} of ${2:iterable}) {",
			"\t$0",
			"}"
		],
		"description": "For...of loop"
	},
	"Webry: For In Loop": {
		"prefix": "fin",
		"body": [
			"for (const ${1:key} in ${2:object}) {",
			"\t$0",
			"}"
		],
		"description": "For...in loop"
	},
	"Webry: For Object Entries": {
		"prefix": "fob",
		"body": [
			"for (const [${2:key}, ${3:value}] of Object.entries(${1:object})) {",
			"\t$4",
			"}"
		],
		"description": "For...of loop with Object.entries()"
	},
	"Webry: New Promise": {
		"prefix": "prom",
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$0",
			"})"
		],
		"description": "New Promise"
	},
	"Webry: If Statement": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "If statement"
	},
	"Webry: Switch Statement": {
		"prefix": "sw",
		"body": [
			"switch (${1:expression}) {",
			"\tcase ${2:value}:",
			"\t\t$0",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch statement"
	},
	"Webry: Console Log": {
		"prefix": "cl",
		"body": [
			"console.log($1);$0"
		],
		"description": "Console log"
	},
	"Webry: Console Error": {
		"prefix": "ce",
		"body": [
			"console.error($1);$0"
		],
		"description": "Console error"
	},
	"Webry: Console Warn": {
		"prefix": "cw",
		"body": [
			"console.warn($1);$0"
		],
		"description": "Console warn"
	},
	"Webry: Set Interval": {
		"prefix": "si",
		"body": [
			"setInterval(() => {",
			"  $2",
			"}, $1);$0",
		],
		"description": "Set Interval"
	},
	"Webry: Set Timeout": {
		"prefix": "st",
		"body": [
			"setTimeout(() => {",
			"  $2",
			"}, $1);$0",
		],
		"description": "Set Timeout"
	},
	"Frappe: Frappe Call Doc": {
		"prefix": "fcall-frm",
		"body": [
			"cur_frm.call({",
			"  args: {",
			"    $3",
			"  },",
			"  callback: ({ message }) => {},",
			"  doc: cur_frm.doc,",
			"  method: \"$1\",",
			"  type: \"$2\",",
			"});$0"
		]
	},
	"Frappe: Frappe Call": {
		"prefix": "fcall",
		"body": [
			"frappe.call({",
			"  args: {",
			"    $3",
			"  },",
			"  callback: ({ message }) => {},",
			"  method: \"$1\",",
			"  type: \"$2\",",
			"});$0"
		]
	},
	"Frappe: Doctype Link": {
		"prefix": "flink",
		"body": [
			"frappe.utils.get_form_link(${1:doctype}, ${2:docname})$0"
		]
	},
	"Frappe: Time": {
		"prefix": "ftime",
		"body": [
			"frappe.datetime.convert_to_user_tz($1):$0"
		]
	}
}
